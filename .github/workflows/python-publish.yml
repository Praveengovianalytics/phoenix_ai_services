name: Format, Build, and Publish Python Package

on:
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write

jobs:
  format-build-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort poetry

      - name: Auto-format with black and isort
        run: |
          black .
          isort .

      - name: Commit formatting changes if any
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add .
          git diff --cached --quiet || git commit -m "♻️ Auto-format with black and isort"
          git push origin main

      - name: Configure Poetry & Token
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}

      - name: Bump Version and Tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Bump version and extract the new version string (e.g., 0.1.5)
          version_output=$(poetry version patch)
          new_version=$(echo "$version_output" | sed -E 's/.* ([0-9]+\.[0-9]+\.[0-9]+).*/\1/')

          echo "🔖 New version is: $new_version"

          # Commit the version bump
          git commit -am "🔖 Bump version to $new_version"

          # Check if tag already exists
          if git rev-parse "v$new_version" >/dev/null 2>&1; then
            echo "⚠️ Tag v$new_version already exists. Skipping tagging."
          else
            git tag "v$new_version"
            git push origin main --tags
          fi

      - name: Generate and Update CHANGELOG with OpenAI Summary in Table
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Get latest tag
          latest_tag=$(git describe --tags --abbrev=0 || echo "")
          echo "🔖 Previous tag: $latest_tag"

          # Capture date, time, and version
          current_time=$(TZ="Asia/Singapore" date "+%Y-%m-%d %H:%M:%S")
          version_output=$(poetry version -s)
          new_version=$(echo "$version_output")

          # Get list of authors and commits since last tag
          if [ -z "$latest_tag" ]; then
            git log --pretty=format:"%an" | sort | uniq > authors.txt
            git log --pretty=format:"- %s" > changes.txt
          else
            git log "$latest_tag"..HEAD --pretty=format:"%an" | sort | uniq > authors.txt
            git log "$latest_tag"..HEAD --pretty=format:"- %s" > changes.txt
          fi

          echo "📋 Git commits:"
          cat changes.txt

          # Generate changelog with OpenAI
          cat <<EOF > generate_changelog.py

      - name: Generate and Update CHANGELOG with OpenAI Summary in Table
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Get latest tag
          latest_tag=$(git describe --tags --abbrev=0 || echo "")
          echo "🔖 Previous tag: $latest_tag"

          # Capture date, time, and version
          current_time=$(TZ="Asia/Singapore" date "+%Y-%m-%d %H:%M:%S")
          version_output=$(poetry version -s)
          new_version=$(echo "$version_output")

          # Get list of authors and commits since last tag
          if [ -z "$latest_tag" ]; then
            git log --pretty=format:"%an" | sort | uniq > authors.txt
            git log --pretty=format:"- %s" > changes.txt
          else
            git log "$latest_tag"..HEAD --pretty=format:"%an" | sort | uniq > authors.txt
            git log "$latest_tag"..HEAD --pretty=format:"- %s" > changes.txt
          fi

          echo "📋 Git commits:"
          cat changes.txt

          # Generate changelog with OpenAI
          cat <<EOF > generate_changelog.py

          import openai

          openai.api_key = "${{ secrets.OPENAI_API_KEY }}"

          with open("changes.txt") as f:
              diff_summary = f.read()

          prompt = f"Summarize the following git commits into clear, professional changelog release notes for a Python library in bullet points:\\n\\n{diff_summary}"

          response = openai.ChatCompletion.create(
              model="gpt-4",
              messages=[
                  {"role": "system", "content": "You are an open source release manager writing clear changelog notes."},
                  {"role": "user", "content": prompt}
              ],
              temperature=0.4,
              max_tokens=300
          )

          summary = response['choices'][0]['message']['content']

          with open("authors.txt") as f:
              authors = ', '.join([line.strip() for line in f.readlines()])

          changelog_entry = f"""
          ### 🚀 Version {new_version} — {current_time}

          | Field     | Details |
          |-----------|---------|
          | **Version** | {new_version} |
          | **Date**    | {current_time} |
          | **Authors** | {authors} |

          #### 🔧 Changes:
          {summary}
          """

          print("📚 Generated Changelog Entry:")
          print(changelog_entry)

          with open("CHANGELOG.md", "a") as f:
              f.write("\\n" + changelog_entry + "\\n")
          EOF

                    python3 generate_changelog.py

      - name: Commit CHANGELOG
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add CHANGELOG.md
          git commit -m "📚 Update CHANGELOG for v${{ new_version }}"
          git push origin main

          
      - name: Build with Poetry
        run: poetry build

      - name: Publish to PyPI
        run: poetry publish --no-interaction --username __token__ --password ${{ secrets.PYPI_API_TOKEN }}
