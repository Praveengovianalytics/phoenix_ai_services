name: Format, Build, and Publish Python Package

on:
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write

jobs:
  format-build-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort poetry

      - name: Auto-format with black and isort
        run: |
          black .
          isort .

      - name: Commit formatting changes if any
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add .
          git diff --cached --quiet || git commit -m "‚ôªÔ∏è Auto-format with black and isort"
          git push origin main

      - name: Configure Poetry & Token
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}

      - name: Bump Version and Tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Bump version and extract the new version string (e.g., 0.1.5)
          version_output=$(poetry version patch)
          new_version=$(echo "$version_output" | sed -E 's/.* ([0-9]+\.[0-9]+\.[0-9]+).*/\1/')

          echo "üîñ New version is: $new_version"

          # Commit the version bump
          git commit -am "üîñ Bump version to $new_version"

          # Check if tag already exists
          if git rev-parse "v$new_version" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Tag v$new_version already exists. Skipping tagging."
          else
            git tag "v$new_version"
            git push origin main --tags
          fi

      - name: Build with Poetry
        run: poetry build

      - name: Publish to PyPI
        run: poetry publish --no-interaction --username __token__ --password ${{ secrets.PYPI_API_TOKEN }}
